package cn.littlelory;

import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

/**
 * Created by littlelory on 31/08/2017.
 */
public class TempIndexTest {
    private String baseDirPath;
    private String objectDirPath;
    private String indexPath;
    private TempSpace tempSpace;

    @Before
    public void init() throws IOException {
        baseDirPath = TestUtil.resourcesPath() + "data/index";
        objectDirPath = TestUtil.resourcesPath() + "data/index/.jit/objects";
        indexPath = TestUtil.resourcesPath() + "data/index/.jit/index";
        System.out.println("indexPath:" + indexPath);

        byte[] bytes = new byte[]{
                0x0,0x0,0x0,0x35,//first entry size
                0x0,0x0,0x0,0x28,//fingerprint length = 40
                0x38, 0x31, 0x63, 0x35, 0x34, 0x35, 0x65, 0x66, 0x65, 0x62, 0x65, 0x35, 0x66, 0x35, 0x37, 0x64, 0x34, 
                0x63, 0x61, 0x62, 0x32, 0x62, 0x61, 0x39, 0x65, 0x63, 0x32, 0x39, 0x34, 0x63, 0x34, 0x62, 0x30, 0x63, 
                0x61, 0x64, 0x66, 0x36, 0x37, 0x32,//fingerprint = f8babe2ae1bb59c45a283077fd4cb47bb9c106a7
                0x0,0x0,0x0,0x5,//pathname length = 5
                0x61, 0x2E, 0x74, 0x78, 0x74,//pathname =  a.txt

                0x0,0x0,0x0,0x39,//second entry size
                0x0,0x0,0x0,0x28,//fingerprint length = 40
                0x37, 0x32, 0x39, 0x34, 0x33, 0x61, 0x31, 0x36, 0x66, 0x62, 0x32, 0x63, 0x38, 0x66, 0x33, 0x38, 0x66,
                0x39, 0x64, 0x64, 0x65, 0x32, 0x30, 0x32, 0x62, 0x37, 0x61, 0x37, 0x30, 0x63, 0x63, 0x63, 0x31, 0x39,
                0x63, 0x35, 0x32, 0x66, 0x33, 0x34,//fingerprint = 72943a16fb2c8f38f9dde202b7a70ccc19c52f34
                0x0,0x0,0x0,0x9,//pathname length = 9
                0x64,0x69,0x72,0x2F,0x62,0x2E,0x74,0x78,0x74,//pathname =  b.txt
        };

        Files.write(Paths.get(indexPath), bytes);

        TestUtil.deleteChildrenIfExists(Paths.get(TestUtil.resourcesPath() + "data/index/.jit/objects"));

        tempSpace = new TempSpace(baseDirPath, objectDirPath, indexPath);
    }

    @Test
    public void add_a_new_entry() throws IOException {
        tempSpace.add("b.txt");
        byte[] actual = readBytesFromIndex();
        byte[] expect = new byte[] {
                0x0,0x0,0x0,0x35,//first entry size
                0x0,0x0,0x0,0x28,//fingerprint length = 40
                0x38, 0x31, 0x63, 0x35, 0x34, 0x35, 0x65, 0x66, 0x65, 0x62, 0x65, 0x35, 0x66, 0x35, 0x37, 0x64, 0x34, 
                0x63, 0x61, 0x62, 0x32, 0x62, 0x61, 0x39, 0x65, 0x63, 0x32, 0x39, 0x34, 0x63, 0x34, 0x62, 0x30, 0x63, 
                0x61, 0x64, 0x66, 0x36, 0x37, 0x32,//fingerprint = f8babe2ae1bb59c45a283077fd4cb47bb9c106a7
                0x0,0x0,0x0,0x5,//pathname length = 5
                0x61, 0x2E, 0x74, 0x78, 0x74,//pathname =  a.txt

                0x0,0x0,0x0,0x35,//second entry size
                0x0,0x0,0x0,0x28,//fingerprint length = 40
                0x33, 0x39, 0x61, 0x34, 0x39, 0x32, 0x64, 0x61, 0x36, 0x36, 0x33, 0x36, 0x38, 0x37, 0x30, 0x34, 0x30,
                0x66, 0x38, 0x33, 0x34, 0x61, 0x35, 0x30, 0x38, 0x61, 0x37, 0x37, 0x66, 0x65, 0x32, 0x34, 0x32, 0x35,
                0x39, 0x34, 0x32, 0x65, 0x64, 0x30,//fingerprint = 39a492da663687040f834a508a77fe2425942ed0
                0x0,0x0,0x0,0x5,//pathname length = 5
                0x62, 0x2E, 0x74, 0x78, 0x74,//pathname =  b.txt

                0x0,0x0,0x0,0x39,//third entry size
                0x0,0x0,0x0,0x28,//fingerprint length = 40
                0x37, 0x32, 0x39, 0x34, 0x33, 0x61, 0x31, 0x36, 0x66, 0x62, 0x32, 0x63, 0x38, 0x66, 0x33, 0x38, 0x66,
                0x39, 0x64, 0x64, 0x65, 0x32, 0x30, 0x32, 0x62, 0x37, 0x61, 0x37, 0x30, 0x63, 0x63, 0x63, 0x31, 0x39,
                0x63, 0x35, 0x32, 0x66, 0x33, 0x34,//fingerprint = 72943a16fb2c8f38f9dde202b7a70ccc19c52f34
                0x0,0x0,0x0,0x9,//pathname length = 9
                0x64,0x69,0x72,0x2F,0x62,0x2E,0x74,0x78,0x74,//pathname =  dir/b.txt
        };

        TestUtil.assertBytesEquals(expect, actual);
    }

    @Test(expected = IndexAlreadyExistExpetion.class)
    public void add_an_exist_entry() {
        tempSpace.add("a.txt");
    }

    @Test
    public void update_an_entry() throws IOException {
        Files.write(Paths.get(baseDirPath + "/a.txt"), "111".getBytes());
        tempSpace.update("a.txt");
        byte[] actual = readBytesFromIndex();
        byte[] expect = new byte[]{
                0x0,0x0,0x0,0x35,//first entry size
                0x0,0x0,0x0,0x28,//fingerprint length = 40
                0x35, 0x65, 0x61, 0x32, 0x30, 0x62, 0x32, 0x62, 0x37, 0x66, 0x30, 0x30, 0x64, 0x34, 0x63, 0x39, 0x66,
                0x32, 0x62, 0x35, 0x31, 0x64, 0x61, 0x38, 0x34, 0x62, 0x30, 0x33, 0x30, 0x61, 0x34, 0x34, 0x31, 0x65,
                0x31, 0x65, 0x39, 0x65, 0x61, 0x37,//fingerprint = 81c545efebe5f57d4cab2ba9ec294c4b0cadf672
                0x0,0x0,0x0,0x5,//pathname length = 5
                0x61, 0x2E, 0x74, 0x78, 0x74,//pathname =  a.txt

                0x0,0x0,0x0,0x39,//second entry size
                0x0,0x0,0x0,0x28,//fingerprint length = 40
                0x37, 0x32, 0x39, 0x34, 0x33, 0x61, 0x31, 0x36, 0x66, 0x62, 0x32, 0x63, 0x38, 0x66, 0x33, 0x38, 0x66,
                0x39, 0x64, 0x64, 0x65, 0x32, 0x30, 0x32, 0x62, 0x37, 0x61, 0x37, 0x30, 0x63, 0x63, 0x63, 0x31, 0x39,
                0x63, 0x35, 0x32, 0x66, 0x33, 0x34,//fingerprint = 72943a16fb2c8f38f9dde202b7a70ccc19c52f34
                0x0,0x0,0x0,0x9,//pathname length = 9
                0x64,0x69,0x72,0x2F,0x62,0x2E,0x74,0x78,0x74,//pathname =  b.txt
        };

        TestUtil.assertBytesEquals(expect, actual);
    }

    @Test(expected = NoSuchIndexException.class)
    public void update_a_not_exist_entry() {
        tempSpace.update("c.txt");
    }

    @Test
    public void remove_an_entry() throws IOException {
        tempSpace.remove("a.txt");
        byte[] actual = readBytesFromIndex();
        byte[] expect = new byte[]{
                0x0,0x0,0x0,0x39,//second entry size
                0x0,0x0,0x0,0x28,//fingerprint length = 40
                0x37, 0x32, 0x39, 0x34, 0x33, 0x61, 0x31, 0x36, 0x66, 0x62, 0x32, 0x63, 0x38, 0x66, 0x33, 0x38, 0x66,
                0x39, 0x64, 0x64, 0x65, 0x32, 0x30, 0x32, 0x62, 0x37, 0x61, 0x37, 0x30, 0x63, 0x63, 0x63, 0x31, 0x39,
                0x63, 0x35, 0x32, 0x66, 0x33, 0x34,//fingerprint = 72943a16fb2c8f38f9dde202b7a70ccc19c52f34
                0x0,0x0,0x0,0x9,//pathname length = 9
                0x64,0x69,0x72,0x2F,0x62,0x2E,0x74,0x78,0x74,//pathname =  b.txt
        };

        TestUtil.assertBytesEquals(expect, actual);
    }

    @Test(expected = NoSuchIndexException.class)
    public void remove_a_not_exist_entry() {
        tempSpace.remove("c.txt");
    }


    private byte[] readBytesFromIndex() throws IOException {
        return Files.readAllBytes(Paths.get(indexPath));
    }
}
